// <auto-generated />
using System;
using LibraryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("LibraryManagement.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorName")
                        .HasColumnType("TEXT");

                    b.HasKey("BookTitleId", "AuthorName");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookCopy", b =>
                {
                    b.Property<int>("BookTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookTitleId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookCopies");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookLoan", b =>
                {
                    b.Property<int>("BookTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReaderCardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("BookTitleId", "LibraryId", "ReaderCardId", "BorrowDate");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ReaderCardId");

                    b.ToTable("BookLoans");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookTitle", b =>
                {
                    b.Property<int>("BookTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("BookTitleId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookTitles");
                });

            modelBuilder.Entity("LibraryManagement.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryName")
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("LibraryManagement.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("LibraryManagement.Models.Reader", b =>
                {
                    b.Property<int>("ReaderCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("ReaderCardId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagement.Models.BookTitle", "BookTitle")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookCopy", b =>
                {
                    b.HasOne("LibraryManagement.Models.BookTitle", "BookTitle")
                        .WithMany()
                        .HasForeignKey("BookTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Library", "Library")
                        .WithMany("BookCopies")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookLoan", b =>
                {
                    b.HasOne("LibraryManagement.Models.BookTitle", "BookTitle")
                        .WithMany("BookLoans")
                        .HasForeignKey("BookTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Library", "Library")
                        .WithMany("BookLoans")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Models.Reader", "Reader")
                        .WithMany("BookLoans")
                        .HasForeignKey("ReaderCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");

                    b.Navigation("Library");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookTitle", b =>
                {
                    b.HasOne("LibraryManagement.Models.Publisher", "Publisher")
                        .WithMany("BookTitles")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryManagement.Models.BookTitle", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookLoans");
                });

            modelBuilder.Entity("LibraryManagement.Models.Library", b =>
                {
                    b.Navigation("BookCopies");

                    b.Navigation("BookLoans");
                });

            modelBuilder.Entity("LibraryManagement.Models.Publisher", b =>
                {
                    b.Navigation("BookTitles");
                });

            modelBuilder.Entity("LibraryManagement.Models.Reader", b =>
                {
                    b.Navigation("BookLoans");
                });
#pragma warning restore 612, 618
        }
    }
}
